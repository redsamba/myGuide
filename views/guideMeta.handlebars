<h1>General Requests and Meta Requests</h1>
<article>
  <p>
    In this section of the guide we will finally be able to go forward with actually implementing something useful with the IGDB API. I 
    won't be doing anything too fancy with it, but it should be quite obvious the potential it can have for any website that either buys
    or sells video games, or retains a list of information about video games. Specifically in this section of the guide I will discuss the
    primary GET Request that all of the API Categories have and which how they might be useful. I will also briefly cover the Meta request
    and its usages in conjunction with the General request.
  </p>
  <section>
    <h2>General GET Requests</h2>
    <p>
      I call it the General Request, simply because of how vague and all encompassing it can be as a data retrieval method. Simply put,
      when this particular request gets made, all items within a given API category are returned in a large JSON Object. The typical
      notation for the request is simply a "/{category}" placed within the url string, where "{category}" is one of the five main data
      categories that the database uses to organize its information. So let say I make the following request:
    </p>
    <span>https://www.igdb.com/api/v1/franchises?token={!insert api key here!}</span>
    <p>
      In this particular query, we are simply requesting that a list of all franchises be returned as a JSON Object, along with all of the
      pertinent data that it contains. The one caviet to this particular request, however, is that it can only return a maximum of 25 
      franchise objects within the response object. So if you have a thousand franchises in the list, you would only be able to access
      the first 25 of them, and by default they are ordered by there name value alphanumerically. In order to traverse the whole list
      of objects, you would need to ensure that you set the offset parameter. The offset parameter simply tells where to start the 
      retrieval of the list inside of the franchise database. So if I wanted to start in the middle of the list, and the list has a 
      total of 1000 objects in it, then I would need to set the offset parameter to 499 (the general object returned contains an object
      called franchises, which is itself an array of franchise objects. So you will need to work with the appropriate array index to get
      to the place where you want to start.)
    </p>
    <span>https://www.igdb.com/api/v1/franchises?limit=10&offset=499&token={!insert api key here!}</span>
    <p>
      As you can see above the offset parameter is set to 499, but there is also a limit parameter as well. The limit parameter is a
      useful parameter for a general request, because it can limit the number of objects that are returned to you. So in the above
      example you have 10 franchise objects that are returned with the GET request, and you start at the 501st franchise. The important
      thing to remember about the limit and offset parameters, is that if you are having to retreive all 500 franchise objects in total,
      you would have to set up some kind of loop that would take 50 total requests. As a side note, the largest limit size (and also 
      default size of the request) is 25.
    </p>
    <p>
      With all of this being said, lets see this being applied in a more applicable manner. Lets say that I have it set up to where
      the following options were set up within my options object:
    </p>
    <pre>
      <code>
        var https = require('https');
        var offset = 0;

        var options = {
          host: 'www.igdb.com',
          path: '/api/v1/companies?limit=10&offset=' + offset,
          port: '443',
          headers: {
          'Accept': 'application/json',
          'Authorization': 'Token token="123"'
          }
        };
      </code>
    </pre>
    <p>
        Up above we have a simple variable called offset, and it is set to be added to the path string in the options object. At first
      this should only return the first 10 companies that are held within the database. But if we tweeked the last bit of code below:
    </p>
    <pre>
      <code>
        callback = function(response) {
          var str = ''
          response.on('data', function (chunk) {
            str += chunk;
          });
  
          response.on('end', function () {
            myGames = JSON.parse(str);
            console.log(str);
    
            var qParams = [];
            for(var i = 0; i < 25; i++){
      
              for (var p in myGames.companies[i]){
                qParams.push({'name':p,'value':(myGames.companies[i])[p]});
                console.log("Name: " + p  + (myGames.companies[i])[p]);
              }
      
            }
          });
  
        }
        
        var req;
        for(var j = 0; j < 10; j++){
          
          req = req = https.request(options, callback);
          req.end();
          offset = offset + 10;
        
        }
      </code>
    </pre>
    <p>
        Essentially in the above code segment, since the return limit is set to 10, and the offset is increased by 10 within each
      iteration of the j for loop, I am able to return and print about 100 company objects to the console and store them within the 
      qParams array. The primary usage for this is that I can control how many objects I can get and how far into the overall list of
      companies I can go. As shown on the previous page, this GET request feature is available to all of the five categories and is
      especially useful for looking up the platform category, as there are not as many platform items within the database as compared
      to the other categories. But how can you find out how many objects exist within a given category, and how can you apply that to the
      code itself, especially since the database can change quite a bit over time? The answer is in the meta GET request and I will briefly
      cover how it works, as there is not a whole lot there.
    </p>
  </section>
  <br>
  <section>
    <h2>Meta GET Requests</h2>
    <p>
        These simple type of requests can be found in all of the five categories, and they have a relatively simple purpose. All they do
      is return the size of a given category in a JSON Object. So say I make the following call:  
    </p>
    <span>https://www.igdb.com/api/v1/people/meta?{!insert api key here!}</span>
    <p>
        All this request would return, if printed to the console, would be the following JSON Object:
    </p>
    <pre>
      <code>
        {
          "size": 109083
        }
      </code>
    </pre>
    <p>
        The value of "size" in the above example is roughly the total number of people objects that are found in the people category
      within the database. So say I made a "/companies/meta" request and then stored it into an object or variable called "dataSize",
      I could then use that variable to control the j for loop from above to get the total number of companies printed to the console
      and stored in the array of qParams. As of this guide's creation, there are a total of 9,218 companies within the database, and 
      for the sake of this thought experiment, I will lower it to 9,210 for ease of use. By tweaking the following code segment below:
    </p>
    <pre>
      <code>
        var req;
        //dataSize contains the value returned by "/companies/meta" rounded down.
        dataSize = dataSize / 10;
        for(var j = 0; j < dataSize; j ++){
          
          req = req = https.request(options, callback);
          req.end();
          offset = offset + 10;
        
        }
      </code>
    </pre>
    <p>
        By taking the code from above, and adding the variable dataSize as the upper limit of the control loop, I am able to print out
      most of the company objects inside of the database in about 921 requests. There is not a whole lot here in the meta Object that
      gets returned, but it can be quite useful for when you need to consider a category's number of objects for your own website's
      personal uses. In the next section we will start to cover the ID GET Request and it's applications.
    </p>
  </section>
</article>
<br>
<span>
  <a href="http://52.25.239.188:3000/Page1"><--Previous Page<--</a><span>   </span> <a href="http://52.25.239.188:3000/Page2">-->Next Page--></a>
</span>
