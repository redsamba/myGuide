
<h1>Introduction to the IGDB API:</h1>
<h2>By: Tim Williams</h2>
<br>
<h3>Link to IGDB API Documentation:</h3>
<a href="https://www.igdb.com/api/v1/documentation">IGDB API</a>
<article>
  <p>This is a nifty how-to guide for learning the Internet Games Data Base API. The primary purpose of this API is to allow
  for various queries to there database and return information based on the query criteria. Most of the queries are GET requests
  and they return information about games, the companies that make them, the franchises that those games may be categorized under,
  and the people involved with making those games.
  </p>
  <p>The following pages will cover not so much how to search for the individual item categories (i.e. Games, franchises, people
  etc.), but instead each section will focus on the different ways that these categories can be queried and displayed as many of them
  are practically identical to each other. But for now, we will start with a brief overview of how to access the api and its components,
  and then discuss what each category is and what kind of JSON objects that they can return.
  </p>
  <br>
  <section>
    <h3>Acquiring an API Key:</h3>
    <p>
      In order to get access to any of the API features, you must first request an API key from the website. It's a pretty straight
      forward process if you go to the link provided above and follow these steps:
      <li>If you have not done so already, you can go ahead and make your own account with the website.</li>
      <br>
      <li>From the main documentation page linked above, you'll want to locate the "manage api keys" link in the top left corner.</li>
      <br>
      <li>Once you have an account, you should be taken to the screen where you'll see a link to request and API Key.</li>
      <br>
      <li>On this next page, just provide the info below (i.e. what domains will you use, how will you use the api etc.).</li>
      <br>
      <li>Submit the form and wait for the key to be approved, this can take about a day or so.</li>
      <br>
      <li>Once you have been approved, the key will be listed the next time you select "manage api keys".</li>
    </p>
  </section>
  <br>
  <section>
    <h3>Accessing the API Content:</h3>
    <p>
     With you key in hand, you will be able to set up the initial "options" JSON Object that contains much of the initial information
     you need to make an https request. The request itself, as shown in the linked documentation, takes the "options" object and a
     user specified callback function as parameters to determine what kind of info will be returned and how it will be processed. To
     start off with the "options" object, you need to make sure that the "path" takes you to the right category and response types,
     and that the API key is inserted in the appropriate spot as shown below:
    </p>
    <pre>
      <code>
      var options = {
        host: 'www.igdb.com',
        path: '/api/v1/games',
        port: '443',
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Token token=' + myApiKey
        }
      };
      </code>
    </pre>
    <p>
      In the above segment, you'll notice that the "path:" element has a part of a url as its value. The end of that url "/games",
      is the part that you'll want to replace to access different types of categories and search results, which I will get into in
      a little bit. But for now, you could swap out that segment with "/games/search" or "/companies" to access different parts of
      the api. With the "options" object under way, you can then shift your focus to how the callback function will return the info
      that you requested. A simple example is illustrated below:
      
      <pre>
        <code>
          var callback = function(response){
            var str = ''
            response.on('data', function (chunk) {
                str += chunk;
            });
            
            response.on('end', function(){
            
              var obj = JSON.parse(str);
              console.log(obj.games[9].name);
            
            });
          
          }
        </code>
      </pre>
    </p>
  </section>
  
</article>


